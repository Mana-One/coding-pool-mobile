import 'dart:convert';
import 'dart:io';
import 'package:coding_pool_v0/models/Models.dart';
import 'package:coding_pool_v0/views/MainScreens/Account.dart';
import 'package:coding_pool_v0/views/widgets/PostWidget.dart';
import 'package:coding_pool_v0/web/SocialNetworkService.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;


class PostDetail extends StatefulWidget {
  const PostDetail({Key? key}) : super(key: key);

  @override
  State<PostDetail> createState() => _PostDetailState();
}

class _PostDetailState extends State<PostDetail> {
  late final futurePost;
  late final futureComment;

  List<CommentsData> _commentsData = [];
  PostData _postData = PostData.fromJson({});

  Future<Comment> getPublicationComments(String publicationId) async {
    List<CommentsData> comments = [];

    final prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('token');

    final response = await http.get(
      Uri.parse("https://coding-pool-api.herokuapp.com/comments?limit=20&offset=0&publicationId=" + publicationId),
      headers: {
        HttpHeaders.authorizationHeader: 'Bearer '+ token.toString(),
      },
    );

    print(jsonDecode(response.body));

    Map<String, dynamic> map = jsonDecode(response.body);

    List<dynamic> listResponse = map['data'] ;

    for(int i=0; i<listResponse.length; i++) {
      Map<String, dynamic> mapPost = listResponse[i];
      CommentsData comment = CommentsData.fromJson(mapPost);
      print(comment.content);
      comments.add(comment);
    }

    setState(() {
      _commentsData = comments;
    });

    if (response.statusCode == 200 || response.statusCode == 201) {

      print('Succeeeeeeeesssssss  ');
      return jsonDecode(response.body) ;

    } else {
      throw Exception('Failed to fetch own timeline');
    }
  }

  /*Future<PostData> getPublication(String publicationId) async {

    final prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('token');

    final response = await http.get(
      Uri.parse("https://coding-pool-api.herokuapp.com/publications/" + publicationId),
      headers: {
        HttpHeaders.authorizationHeader: 'Bearer '+ token.toString(),
      },
    );

    print(jsonDecode(response.body));

    Map<String, dynamic> map = jsonDecode(response.body);

    setState(() {
      _postData = PostData.fromJson(map);;
    });

    if (response.statusCode == 200 || response.statusCode == 201) {

      print('Succeeeeeeeesssssss  ');
      return PostData.fromJson(map);

    } else {
      throw Exception('Failed to fetch own timeline');
    }
  }*/

  @override
  void initState() {
    super.initState();
    //futurePost = getPublication('600e5ed0-c4d7-11ec-a1f1-7d07ba2c3b62');
    futureComment =  getPublicationComments('600e5ed0-c4d7-11ec-a1f1-7d07ba2c3b62');
    print(futurePost.toString());
  }

  /*late bool liked = _postData.isLiked;
  late int nbLikes = _postData.likes;


  like() {

    setState(() {
      if( liked ) {
        liked = false;
        unlikePublication('600e5ed0-c4d7-11ec-a1f1-7d07ba2c3b62');
        nbLikes --;
      }
      else {
        liked = true;
        likePublication('600e5ed0-c4d7-11ec-a1f1-7d07ba2c3b62');
        nbLikes ++;
      }
    });
  }*/


  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children : [
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                    child: Column(
                        children: [
                          TextButton(onPressed: () { Navigator.push(context, MaterialPageRoute(builder: (context) => Account()));}, child: Text('pub username', style: TextStyle(color: Colors.blue[900],),),),
                          SizedBox(
                            height: 5.0,
                          ),
                          Container(
                            child: Text( "Publication",),
                          ),
                          SizedBox(
                            height: 5.0,
                          ),
                          Row(
                            children: [
                              //if (!isLiked) IconButton(onPressed: () => print(nbLikes), icon: Icon(Icons.thumb_up_alt_outlined)) else IconButton(onPressed: () => print(nbLikes), icon: Icon(Icons.thumb_up_alt), color: Colors.blue,),
                              IconButton(onPressed: () => print('nbLikes'), icon: Icon(Icons.thumb_up_alt_outlined)), //: Icon(Icons.thumb_up_alt, color: Colors.orange.shade900,),),
                              Text('5'),
                              IconButton(onPressed: () => print('nbComments'), icon: Icon(Icons.insert_comment)),
                              Text('6'),
                            ],
                          ),
                        ]
                    )
                ),
                Container(
                  //flex: 1,
                    child: ListView(
                      shrinkWrap: true,
                      children: [
                        for( var itemPost in _commentsData)
                          CommentWidget(username: itemPost.leftBy.username, content: itemPost.content, createdAt: itemPost.createdAt,)
                      ],
                    )
                ),
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                Container(
                  height: 20,
                  width: 350,
                  margin: EdgeInsets.only(left: 5.0,),
                  child: TextField(
                    decoration: InputDecoration(hintText: 'Add a comment'),
                  ),
                ),
                Container(
                  margin: EdgeInsets.only(right: 3.0, left: 5.0),
                  child: IconButton(onPressed: () => print('publier'), icon: Icon(Icons.send), color: Colors.blue[900],),
                )

              ],
            )
          ]
      ),



    );
  }
}

final String assetName = 'lib/assets/images/logo_no_text.svg';
final Widget svgLogoNoText = SvgPicture.asset(
  assetName,
  semanticsLabel: 'Acme Logo',
  height: 50,
  width: 100,
);

